// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/pujidjayanto/choochoohub/user-api/dto"
	"github.com/pujidjayanto/choochoohub/user-api/usecase"
	"sync"
)

// Ensure, that SignUpUsecaseMock does implement usecase.SignUpUsecase.
// If this is not the case, regenerate this file with moq.
var _ usecase.SignUpUsecase = &SignUpUsecaseMock{}

// SignUpUsecaseMock is a mock implementation of usecase.SignUpUsecase.
//
//	func TestSomethingThatUsesSignUpUsecase(t *testing.T) {
//
//		// make and configure a mocked usecase.SignUpUsecase
//		mockedSignUpUsecase := &SignUpUsecaseMock{
//			CreateFunc: func(c context.Context, req dto.SignupRequest) error {
//				panic("mock out the Create method")
//			},
//		}
//
//		// use mockedSignUpUsecase in code that requires usecase.SignUpUsecase
//		// and then make assertions.
//
//	}
type SignUpUsecaseMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(c context.Context, req dto.SignupRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// C is the c argument value.
			C context.Context
			// Req is the req argument value.
			Req dto.SignupRequest
		}
	}
	lockCreate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *SignUpUsecaseMock) Create(c context.Context, req dto.SignupRequest) error {
	if mock.CreateFunc == nil {
		panic("SignUpUsecaseMock.CreateFunc: method is nil but SignUpUsecase.Create was just called")
	}
	callInfo := struct {
		C   context.Context
		Req dto.SignupRequest
	}{
		C:   c,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(c, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedSignUpUsecase.CreateCalls())
func (mock *SignUpUsecaseMock) CreateCalls() []struct {
	C   context.Context
	Req dto.SignupRequest
} {
	var calls []struct {
		C   context.Context
		Req dto.SignupRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}
