// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/signin.go
//
// Generated by this command:
//
//	mockgen -source=./api/signin.go -package=mocks -destination=./mocks/mock_signin.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockSignInController is a mock of SignInController interface.
type MockSignInController struct {
	ctrl     *gomock.Controller
	recorder *MockSignInControllerMockRecorder
	isgomock struct{}
}

// MockSignInControllerMockRecorder is the mock recorder for MockSignInController.
type MockSignInControllerMockRecorder struct {
	mock *MockSignInController
}

// NewMockSignInController creates a new mock instance.
func NewMockSignInController(ctrl *gomock.Controller) *MockSignInController {
	mock := &MockSignInController{ctrl: ctrl}
	mock.recorder = &MockSignInControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignInController) EXPECT() *MockSignInControllerMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockSignInController) SignIn(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockSignInControllerMockRecorder) SignIn(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockSignInController)(nil).SignIn), c)
}
