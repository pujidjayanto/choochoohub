// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/signin.go
//
// Generated by this command:
//
//	mockgen -source=./usecase/signin.go -package=mocks -destination=./mocks/mock_signin_usecase.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/pujidjayanto/choochoohub/user-api/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockSignInUsecase is a mock of SignInUsecase interface.
type MockSignInUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSignInUsecaseMockRecorder
	isgomock struct{}
}

// MockSignInUsecaseMockRecorder is the mock recorder for MockSignInUsecase.
type MockSignInUsecaseMockRecorder struct {
	mock *MockSignInUsecase
}

// NewMockSignInUsecase creates a new mock instance.
func NewMockSignInUsecase(ctrl *gomock.Controller) *MockSignInUsecase {
	mock := &MockSignInUsecase{ctrl: ctrl}
	mock.recorder = &MockSignInUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignInUsecase) EXPECT() *MockSignInUsecaseMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockSignInUsecase) SignIn(c context.Context, req dto.SigninRequest) (*dto.SigninResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", c, req)
	ret0, _ := ret[0].(*dto.SigninResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockSignInUsecaseMockRecorder) SignIn(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockSignInUsecase)(nil).SignIn), c, req)
}
