// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/db/gorm.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/db/gorm.go -package=mocks -destination=./mocks/mock_db_gorm.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDatabaseHandler is a mock of DatabaseHandler interface.
type MockDatabaseHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseHandlerMockRecorder
	isgomock struct{}
}

// MockDatabaseHandlerMockRecorder is the mock recorder for MockDatabaseHandler.
type MockDatabaseHandlerMockRecorder struct {
	mock *MockDatabaseHandler
}

// NewMockDatabaseHandler creates a new mock instance.
func NewMockDatabaseHandler(ctrl *gomock.Controller) *MockDatabaseHandler {
	mock := &MockDatabaseHandler{ctrl: ctrl}
	mock.recorder = &MockDatabaseHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseHandler) EXPECT() *MockDatabaseHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabaseHandler) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseHandler)(nil).Close))
}

// GetDB mocks base method.
func (m *MockDatabaseHandler) GetDB(ctx context.Context) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockDatabaseHandlerMockRecorder) GetDB(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDatabaseHandler)(nil).GetDB), ctx)
}

// Ping mocks base method.
func (m *MockDatabaseHandler) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDatabaseHandlerMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabaseHandler)(nil).Ping), ctx)
}

// RunTransaction mocks base method.
func (m *MockDatabaseHandler) RunTransaction(ctx context.Context, fc func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", ctx, fc)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockDatabaseHandlerMockRecorder) RunTransaction(ctx, fc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockDatabaseHandler)(nil).RunTransaction), ctx, fc)
}
