// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/pujidjayanto/choochoohub/user-api/pkg/eventbus"
	"sync"
)

// Ensure, that EventBusMock does implement eventbus.EventBus.
// If this is not the case, regenerate this file with moq.
var _ eventbus.EventBus = &EventBusMock{}

// EventBusMock is a mock implementation of eventbus.EventBus.
//
//	func TestSomethingThatUsesEventBus(t *testing.T) {
//
//		// make and configure a mocked eventbus.EventBus
//		mockedEventBus := &EventBusMock{
//			PublishFunc: func(event string, payload interface{})  {
//				panic("mock out the Publish method")
//			},
//			SubscribeFunc: func(event string, handler func(payload interface{}))  {
//				panic("mock out the Subscribe method")
//			},
//		}
//
//		// use mockedEventBus in code that requires eventbus.EventBus
//		// and then make assertions.
//
//	}
type EventBusMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(event string, payload interface{})

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(event string, handler func(payload interface{}))

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Event is the event argument value.
			Event string
			// Payload is the payload argument value.
			Payload interface{}
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Event is the event argument value.
			Event string
			// Handler is the handler argument value.
			Handler func(payload interface{})
		}
	}
	lockPublish   sync.RWMutex
	lockSubscribe sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *EventBusMock) Publish(event string, payload interface{}) {
	if mock.PublishFunc == nil {
		panic("EventBusMock.PublishFunc: method is nil but EventBus.Publish was just called")
	}
	callInfo := struct {
		Event   string
		Payload interface{}
	}{
		Event:   event,
		Payload: payload,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	mock.PublishFunc(event, payload)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedEventBus.PublishCalls())
func (mock *EventBusMock) PublishCalls() []struct {
	Event   string
	Payload interface{}
} {
	var calls []struct {
		Event   string
		Payload interface{}
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *EventBusMock) Subscribe(event string, handler func(payload interface{})) {
	if mock.SubscribeFunc == nil {
		panic("EventBusMock.SubscribeFunc: method is nil but EventBus.Subscribe was just called")
	}
	callInfo := struct {
		Event   string
		Handler func(payload interface{})
	}{
		Event:   event,
		Handler: handler,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	mock.SubscribeFunc(event, handler)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//
//	len(mockedEventBus.SubscribeCalls())
func (mock *EventBusMock) SubscribeCalls() []struct {
	Event   string
	Handler func(payload interface{})
} {
	var calls []struct {
		Event   string
		Handler func(payload interface{})
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}
