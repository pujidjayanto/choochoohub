// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/ping.go
//
// Generated by this command:
//
//	mockgen -source=./api/ping.go -package=mocks -destination=./mocks/mock_ping.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockPingController is a mock of PingController interface.
type MockPingController struct {
	ctrl     *gomock.Controller
	recorder *MockPingControllerMockRecorder
	isgomock struct{}
}

// MockPingControllerMockRecorder is the mock recorder for MockPingController.
type MockPingControllerMockRecorder struct {
	mock *MockPingController
}

// NewMockPingController creates a new mock instance.
func NewMockPingController(ctrl *gomock.Controller) *MockPingController {
	mock := &MockPingController{ctrl: ctrl}
	mock.recorder = &MockPingControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingController) EXPECT() *MockPingControllerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockPingController) Ping(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockPingControllerMockRecorder) Ping(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockPingController)(nil).Ping), c)
}
