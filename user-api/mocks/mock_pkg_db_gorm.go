// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/pujidjayanto/choochoohub/user-api/pkg/db"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that DatabaseHandlerMock does implement db.DatabaseHandler.
// If this is not the case, regenerate this file with moq.
var _ db.DatabaseHandler = &DatabaseHandlerMock{}

// DatabaseHandlerMock is a mock implementation of db.DatabaseHandler.
//
//	func TestSomethingThatUsesDatabaseHandler(t *testing.T) {
//
//		// make and configure a mocked db.DatabaseHandler
//		mockedDatabaseHandler := &DatabaseHandlerMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			GetDBFunc: func(ctx context.Context) *gorm.DB {
//				panic("mock out the GetDB method")
//			},
//			PingFunc: func(ctx context.Context) error {
//				panic("mock out the Ping method")
//			},
//			RunTransactionFunc: func(ctx context.Context, fc func(ctx context.Context) error) error {
//				panic("mock out the RunTransaction method")
//			},
//		}
//
//		// use mockedDatabaseHandler in code that requires db.DatabaseHandler
//		// and then make assertions.
//
//	}
type DatabaseHandlerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// GetDBFunc mocks the GetDB method.
	GetDBFunc func(ctx context.Context) *gorm.DB

	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context) error

	// RunTransactionFunc mocks the RunTransaction method.
	RunTransactionFunc func(ctx context.Context, fc func(ctx context.Context) error) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetDB holds details about calls to the GetDB method.
		GetDB []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// RunTransaction holds details about calls to the RunTransaction method.
		RunTransaction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Fc is the fc argument value.
			Fc func(ctx context.Context) error
		}
	}
	lockClose          sync.RWMutex
	lockGetDB          sync.RWMutex
	lockPing           sync.RWMutex
	lockRunTransaction sync.RWMutex
}

// Close calls CloseFunc.
func (mock *DatabaseHandlerMock) Close() error {
	if mock.CloseFunc == nil {
		panic("DatabaseHandlerMock.CloseFunc: method is nil but DatabaseHandler.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedDatabaseHandler.CloseCalls())
func (mock *DatabaseHandlerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// GetDB calls GetDBFunc.
func (mock *DatabaseHandlerMock) GetDB(ctx context.Context) *gorm.DB {
	if mock.GetDBFunc == nil {
		panic("DatabaseHandlerMock.GetDBFunc: method is nil but DatabaseHandler.GetDB was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetDB.Lock()
	mock.calls.GetDB = append(mock.calls.GetDB, callInfo)
	mock.lockGetDB.Unlock()
	return mock.GetDBFunc(ctx)
}

// GetDBCalls gets all the calls that were made to GetDB.
// Check the length with:
//
//	len(mockedDatabaseHandler.GetDBCalls())
func (mock *DatabaseHandlerMock) GetDBCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetDB.RLock()
	calls = mock.calls.GetDB
	mock.lockGetDB.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *DatabaseHandlerMock) Ping(ctx context.Context) error {
	if mock.PingFunc == nil {
		panic("DatabaseHandlerMock.PingFunc: method is nil but DatabaseHandler.Ping was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedDatabaseHandler.PingCalls())
func (mock *DatabaseHandlerMock) PingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// RunTransaction calls RunTransactionFunc.
func (mock *DatabaseHandlerMock) RunTransaction(ctx context.Context, fc func(ctx context.Context) error) error {
	if mock.RunTransactionFunc == nil {
		panic("DatabaseHandlerMock.RunTransactionFunc: method is nil but DatabaseHandler.RunTransaction was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Fc  func(ctx context.Context) error
	}{
		Ctx: ctx,
		Fc:  fc,
	}
	mock.lockRunTransaction.Lock()
	mock.calls.RunTransaction = append(mock.calls.RunTransaction, callInfo)
	mock.lockRunTransaction.Unlock()
	return mock.RunTransactionFunc(ctx, fc)
}

// RunTransactionCalls gets all the calls that were made to RunTransaction.
// Check the length with:
//
//	len(mockedDatabaseHandler.RunTransactionCalls())
func (mock *DatabaseHandlerMock) RunTransactionCalls() []struct {
	Ctx context.Context
	Fc  func(ctx context.Context) error
} {
	var calls []struct {
		Ctx context.Context
		Fc  func(ctx context.Context) error
	}
	mock.lockRunTransaction.RLock()
	calls = mock.calls.RunTransaction
	mock.lockRunTransaction.RUnlock()
	return calls
}
