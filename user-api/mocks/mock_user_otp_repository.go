// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/pujidjayanto/choochoohub/user-api/model"
	"github.com/pujidjayanto/choochoohub/user-api/repository"
	"sync"
)

// Ensure, that UserOtpRepositoryMock does implement repository.UserOtpRepository.
// If this is not the case, regenerate this file with moq.
var _ repository.UserOtpRepository = &UserOtpRepositoryMock{}

// UserOtpRepositoryMock is a mock implementation of repository.UserOtpRepository.
//
//	func TestSomethingThatUsesUserOtpRepository(t *testing.T) {
//
//		// make and configure a mocked repository.UserOtpRepository
//		mockedUserOtpRepository := &UserOtpRepositoryMock{
//			CreateFunc: func(ctx context.Context, user *model.UserOtp) (*model.UserOtp, error) {
//				panic("mock out the Create method")
//			},
//		}
//
//		// use mockedUserOtpRepository in code that requires repository.UserOtpRepository
//		// and then make assertions.
//
//	}
type UserOtpRepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, user *model.UserOtp) (*model.UserOtp, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User *model.UserOtp
		}
	}
	lockCreate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *UserOtpRepositoryMock) Create(ctx context.Context, user *model.UserOtp) (*model.UserOtp, error) {
	if mock.CreateFunc == nil {
		panic("UserOtpRepositoryMock.CreateFunc: method is nil but UserOtpRepository.Create was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User *model.UserOtp
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, user)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedUserOtpRepository.CreateCalls())
func (mock *UserOtpRepositoryMock) CreateCalls() []struct {
	Ctx  context.Context
	User *model.UserOtp
} {
	var calls []struct {
		Ctx  context.Context
		User *model.UserOtp
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}
