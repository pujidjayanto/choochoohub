// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/signup.go
//
// Generated by this command:
//
//	mockgen -source=./api/signup.go -package=mocks -destination=./mocks/mock_signup.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockSignUpController is a mock of SignUpController interface.
type MockSignUpController struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpControllerMockRecorder
	isgomock struct{}
}

// MockSignUpControllerMockRecorder is the mock recorder for MockSignUpController.
type MockSignUpControllerMockRecorder struct {
	mock *MockSignUpController
}

// NewMockSignUpController creates a new mock instance.
func NewMockSignUpController(ctrl *gomock.Controller) *MockSignUpController {
	mock := &MockSignUpController{ctrl: ctrl}
	mock.recorder = &MockSignUpControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpController) EXPECT() *MockSignUpControllerMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockSignUpController) SignUp(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockSignUpControllerMockRecorder) SignUp(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockSignUpController)(nil).SignUp), c)
}
