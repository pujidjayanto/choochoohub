// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/labstack/echo/v4"
	"github.com/pujidjayanto/choochoohub/user-api/api"
	"sync"
)

// Ensure, that UserApiMock does implement api.UserApi.
// If this is not the case, regenerate this file with moq.
var _ api.UserApi = &UserApiMock{}

// UserApiMock is a mock implementation of api.UserApi.
//
//	func TestSomethingThatUsesUserApi(t *testing.T) {
//
//		// make and configure a mocked api.UserApi
//		mockedUserApi := &UserApiMock{
//			SignUpFunc: func(c echo.Context) error {
//				panic("mock out the SignUp method")
//			},
//		}
//
//		// use mockedUserApi in code that requires api.UserApi
//		// and then make assertions.
//
//	}
type UserApiMock struct {
	// SignUpFunc mocks the SignUp method.
	SignUpFunc func(c echo.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// SignUp holds details about calls to the SignUp method.
		SignUp []struct {
			// C is the c argument value.
			C echo.Context
		}
	}
	lockSignUp sync.RWMutex
}

// SignUp calls SignUpFunc.
func (mock *UserApiMock) SignUp(c echo.Context) error {
	if mock.SignUpFunc == nil {
		panic("UserApiMock.SignUpFunc: method is nil but UserApi.SignUp was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockSignUp.Lock()
	mock.calls.SignUp = append(mock.calls.SignUp, callInfo)
	mock.lockSignUp.Unlock()
	return mock.SignUpFunc(c)
}

// SignUpCalls gets all the calls that were made to SignUp.
// Check the length with:
//
//	len(mockedUserApi.SignUpCalls())
func (mock *UserApiMock) SignUpCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockSignUp.RLock()
	calls = mock.calls.SignUp
	mock.lockSignUp.RUnlock()
	return calls
}
